import React, { useState, useRef, useEffect } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import axios from 'axios';
import { saveAs } from 'file-saver';
import { pdf } from '@react-pdf/renderer';
import * as XLSX from 'xlsx';
import html2canvas from 'html2canvas';
import Chart from 'chart.js/auto';
import { FaCloudUploadAlt, FaFileExcel, FaImage, FaChartBar, FaFileDownload, FaCheckCircle, FaTimes, FaSave, FaFilePdf, FaTrash, FaPlus } from 'react-icons/fa';
import ExpertReportPDFContainer from './ExpertReportPDFContainer';
import CloudinaryUploader from './CloudinaryUploader';
import ErrorBoundary from './ErrorBoundary';

const ExpertReport = () => {
  const navigate = useNavigate();
  const fileInputRef = useRef(null);
  const excelFileInputRef = useRef(null);
  const feedbackExcelInputRef = useRef(null);
  const chartsContainerRef = useRef(null);
  
  // State for form data
  const [formData, setFormData] = useState({
    title: "Quantum Computing",
    eventDate: "17/01/2025",
    eventTime: "03:00 pm to 05:00 pm",
    organizer: "Ms. Arti G Ghule",
    courseName: "Natural Language Processing",
    mode: "Online -Microsoft Teams",
    link: "https://teams.microsoft.com/l/meetupjoin/19%3ameeting_MDk5NTAzZWMtMzczNC00MWYwLTkwZmQtODhhNmZjZDA4ZTVk%40thread.v2/0?context=%7b%22Tid%22%3a%220a0aa63d-82d0-4ba1-b909d7986ece4c4c%22%2c%22Oid%22%3a%22acdcf479-e76c-436c-8eb73ff47fb72343%22%7d",
    participants: "235",
    objectives: [
      "Providing knowledge of Quantum Computing with real-life examples",
      "Introduction of Natural Quantum Computing",
      "Creating awareness of Internship, Placements, and Research Opportunities in Quantum Computing among students"
    ],
    outcomes: [
      "Understand role of quantum computing in different sectors like aerospace, healthcare, automobile, marketing etc.",
      "Understand Quantum Computing power in computations also boosted their confidence in applying Internship, Placements and Research Opportunities in Quantum Computing effectively"
    ],
    coPoMapping: [
      { code: "C19412C.6", description: "Students will be able to apply information retrieval techniques and learned how Quantum Computing helps in boosting speed of different IR algorithms" },
      { code: "PO11", description: "Project Management and Finance (To manage projects in multidisciplinary environment)" },
      { code: "PSO3", description: "Work in team to manage complex IT project using suitable project management techniques by utilizing high level interpersonal skills" }
    ],
    resourcePerson: "Mrs. Vaidehi Gawande/Dhande",
    impactAnalysis: [
      { title: "Knowledge Enhancement", content: "The session deepened the students' understanding of quantum computing fundamentals (e.g., qubits, superposition, entanglement). They gained insight into practical applications like cryptography, optimization, or quantum algorithms." },
      { title: "Awareness", content: "The session raised awareness about the current state of quantum computing research, challenges, and industry trends." },
      { title: "Skill Development", content: "Improved problem-solving or basic programming skills in quantum programming languages like Qiskit or Cirq." },
      { title: "Career Influence", content: "Students expressed an interest in pursuing careers or research in quantum computing as a result of the session." },
      { title: "Student Feedback", content: "Feedback form has been shared among students to understand their enthusiasm and satisfaction with the session." }
    ],
    excelData: [],
    feedbackData: [],
    chartImages: [],
    // Categorized images structure to match PDA report
    categorizedImages: {
      team: [],
      speakers: [],     // Change from winners to speakers for expert sessions
      certificates: [],
      general: []       // For uncategorized images
    }
  });

  // States for UI handling
  const [selectedTab, setSelectedTab] = useState('details');
  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false);
  const [isProcessingFeedback, setIsProcessingFeedback] = useState(false);
  const [isUploadingImages, setIsUploadingImages] = useState(false);
  const [pdfError, setPdfError] = useState(null);
  const [statusMessage, setStatusMessage] = useState('');
  const [saveSuccess, setSaveSuccess] = useState(false);
  const [chartData, setChartData] = useState([]);
  const [chartImages, setChartImages] = useState([]);
  
  // Update imageFiles to track categories like in PDA
  const [imageFiles, setImageFiles] = useState({
    team: [],
    speakers: [],
    certificates: [],
    general: []
  });

  // Handle changes to array fields (like objectives, outcomes)
  const handleArrayChange = (field, index, value) => {
    const newArray = [...formData[field]];
    newArray[index] = value;
    setFormData({ ...formData, [field]: newArray });
  };

  // Add new item to array field
  const handleAddArrayItem = (field) => {
    if (field === 'coPoMapping') {
      const newMapping = { code: "", description: "" };
      setFormData({ ...formData, [field]: [...formData[field], newMapping] });
    } else if (field === 'impactAnalysis') {
      const newImpact = { title: "", content: "" };
      setFormData({ ...formData, [field]: [...formData[field], newImpact] });
    } else {
      setFormData({ ...formData, [field]: [...formData[field], ""] });
    }
  };

  // Remove item from array field
  const handleRemoveArrayItem = (field, index) => {
    const newArray = [...formData[field]];
    newArray.splice(index, 1);
    setFormData({ ...formData, [field]: newArray });
  };

  // Handle changes to nested object fields (like coPoMapping and impactAnalysis)
  const handleNestedObjectChange = (field, index, key, value) => {
    const newArray = [...formData[field]];
    newArray[index] = { ...newArray[index], [key]: value };
    setFormData({ ...formData, [field]: newArray });
  };

  // Handle Excel file upload for student data
  const handleExcelUpload = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    try {
      setStatusMessage('Processing Excel file...');
      const data = await parseExcelFile(file);
      setFormData({ ...formData, excelData: data });
      setStatusMessage(`Successfully imported ${data.length} rows of data!`);
    } catch (error) {
      console.error('Error parsing Excel file:', error);
      setStatusMessage(`Error parsing Excel file: ${error.message}`);
    }
  };

  // Parse Excel file
  const parseExcelFile = (file) => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const data = e.target.result;
          const workbook = XLSX.read(data, { type: 'array' });
          const firstSheetName = workbook.SheetNames[0];
          const worksheet = workbook.Sheets[firstSheetName];
          const parsedData = XLSX.utils.sheet_to_json(worksheet);
          resolve(parsedData);
        } catch (error) {
          reject(error);
        }
      };
      reader.onerror = (error) => reject(error);
      reader.readAsArrayBuffer(file);
    });
  };

  // Handle feedback data Excel file upload
  const handleFeedbackUpload = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    try {
      setIsProcessingFeedback(true);
      setStatusMessage('Processing feedback data...');
      const data = await parseExcelFile(file);
      setFormData({ ...formData, feedbackData: data });
      
      // Process feedback data for charts
      processFeedbackData(data);
      
      setStatusMessage(`Successfully imported feedback data! Generating charts...`);
    } catch (error) {
      console.error('Error processing feedback data:', error);
      setStatusMessage(`Error processing feedback data: ${error.message}`);
      setIsProcessingFeedback(false);
    }
  };

  // Process feedback data to create charts
  const processFeedbackData = (data) => {
    try {
      if (!data || data.length === 0) {
        setStatusMessage('No data available to generate charts');
        setIsProcessingFeedback(false);
        return;
      }

      const questions = Object.keys(data[0]).filter(key => 
        !['Name', 'Email', 'Timestamp', 'ID'].includes(key)
      );

      const processedChartData = questions.map(question => {
        // Count responses for each option
        const responses = {};
        data.forEach(row => {
          const answer = row[question];
          if (answer) {
            responses[answer] = (responses[answer] || 0) + 1;
          }
        });

        // Prepare chart data
        return {
          question,
          labels: Object.keys(responses),
          data: Object.values(responses)
        };
      });

      setChartData(processedChartData);
      setIsProcessingFeedback(false);
      setStatusMessage('Charts generated successfully! You can capture them for the PDF.');
    } catch (error) {
      console.error('Error generating charts:', error);
      setStatusMessage(`Error generating charts: ${error.message}`);
      setIsProcessingFeedback(false);
    }
  };
  
  // Add a function to handle categorized image uploads
  const handleCategorizedImageUpload = (uploadedImages, category) => {
    // Default to 'general' if no category is provided
    const imageCategory = category || 'general';
    
    console.log(`Received ${uploadedImages.length} uploaded images in category: ${imageCategory}`);
    
    // Update the imageFiles state with the new uploads - ensure we only add to specific category
    setImageFiles(prevFiles => {
      // Create a deep copy of the current state to avoid reference issues
      const updatedFiles = { ...prevFiles };
      
      // Add new images to the appropriate category
      updatedFiles[imageCategory] = [
        ...prevFiles[imageCategory], 
        ...uploadedImages
      ];
      
      console.log(`Updated imageFiles state: ${imageCategory} category now has ${updatedFiles[imageCategory].length} images`);
      return updatedFiles;
    });
    
    // Also update the formData with the Cloudinary URLs
    setFormData(prevData => {
      // Get the existing categorized images or initialize if not present
      const existingCategorizedImages = prevData.categorizedImages || {
        team: [],
        speakers: [],
        certificates: [],
        general: []
      };
      
      // Add the new image URLs to the appropriate category
      const updatedCategorizedImages = {
        ...existingCategorizedImages,
        [imageCategory]: [
          ...existingCategorizedImages[imageCategory],
          ...uploadedImages.map(img => img.original)
        ]
      };
      
      console.log(`Updated formData: ${imageCategory} category now has ${updatedCategorizedImages[imageCategory].length} image URLs`);
      
      return {
        ...prevData,
        categorizedImages: updatedCategorizedImages
      };
    });
    
    setStatusMessage(`Successfully added ${uploadedImages.length} images to the ${imageCategory} category!`);
  };
  
  // Create chart using Chart.js
  useEffect(() => {
    const chartInstances = [];
    
    // Clean up any existing charts first
    chartInstances.forEach(chart => chart.destroy());
    
    // Create new charts
    chartData.forEach((item, index) => {
      const ctx = document.getElementById(`chart-${index}`);
      if (!ctx) return;
      
      // Create bar chart
      const barChart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: item.labels,
          datasets: [{
            label: 'Responses',
            data: item.data,
            backgroundColor: [
              'rgba(54, 162, 235, 0.6)',
              'rgba(255, 99, 132, 0.6)',
              'rgba(255, 206, 86, 0.6)',
              'rgba(75, 192, 192, 0.6)',
              'rgba(153, 102, 255, 0.6)'
            ],
            borderColor: [
              'rgba(54, 162, 235, 1)',
              'rgba(255, 99, 132, 1)',
              'rgba(255, 206, 86, 1)',
              'rgba(75, 192, 192, 1)',
              'rgba(153, 102, 255, 1)'
            ],
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: { beginAtZero: true }
          }
        }
      });
      
      chartInstances.push(barChart);
      
      // Create pie chart
      const pieCtx = document.getElementById(`pie-chart-${index}`);
      if (!pieCtx) return;
      
      const pieChart = new Chart(pieCtx, {
        type: 'pie',
        data: {
          labels: item.labels,
          datasets: [{
            data: item.data,
            backgroundColor: [
              'rgba(54, 162, 235, 0.6)',
              'rgba(255, 99, 132, 0.6)',
              'rgba(255, 206, 86, 0.6)',
              'rgba(75, 192, 192, 0.6)',
              'rgba(153, 102, 255, 0.6)'
            ],
            borderColor: [
              'rgba(54, 162, 235, 1)',
              'rgba(255, 99, 132, 1)',
              'rgba(255, 206, 86, 1)',
              'rgba(75, 192, 192, 1)',
              'rgba(153, 102, 255, 1)'
            ],
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false
        }
      });
      
      chartInstances.push(pieChart);
    });
    
    // Clean up on component unmount
    return () => {
      chartInstances.forEach(chart => chart.destroy());
    };
  }, [chartData]);

  // Capture charts as images
  const captureCharts = async () => {
    setStatusMessage('Starting to capture charts...');
    if (!chartsContainerRef.current) {
      console.error('Chart container ref is not available');
      setStatusMessage('Error: Chart container not found');
      return [];
    }

    try {
      // Clear any previous chart images
      const chartImagesArray = [];
      
      // Find all chart containers
      const chartItems = document.querySelectorAll('[id^="chart-item-"]');
      setStatusMessage(`Found ${chartItems.length} chart items to capture`);
      
      if (chartItems.length === 0) {
        setStatusMessage('No charts found to capture. Please upload feedback data first.');
        return [];
      }

      // Process each chart container
      for (let i = 0; i < chartItems.length; i++) {
        const itemElement = chartItems[i];
        const questionHeader = itemElement.querySelector('h4')?.textContent || `Question ${i+1}`;
        
        // Update status
        setStatusMessage(`Capturing chart ${i+1}/${chartItems.length}: ${questionHeader}...`);
        
        try {
          // Add temporary styling for capture
          const originalStyle = itemElement.getAttribute('style') || '';
          itemElement.setAttribute('style', `${originalStyle}; background-color: white; padding: 10px; border-radius: 8px;`);
          
          // Use html2canvas to capture
          const canvas = await html2canvas(itemElement, {
            scale: 2,
            logging: false,
            backgroundColor: 'white',
            useCORS: true
          });
          
          // Restore original styling
          itemElement.setAttribute('style', originalStyle);
          
          // Convert to image
          const imageData = canvas.toDataURL('image/png');
          
          // Store image data
          chartImagesArray.push({
            title: questionHeader,
            src: imageData
          });
          
          setStatusMessage(`Captured chart ${i+1}/${chartItems.length}`);
        } catch (captureError) {
          console.error(`Error capturing chart ${i+1}:`, captureError);
          setStatusMessage(`Error capturing chart ${i+1}: ${captureError.message}`);
        }
      }
      
      if (chartImagesArray.length > 0) {
        setStatusMessage(`Successfully captured ${chartImagesArray.length} charts!`);
        
        // Store in both state variables
        setChartImages(chartImagesArray);
        setFormData(prevState => ({
          ...prevState,
          chartImages: chartImagesArray
        }));
        
        setStatusMessage(`✅ Successfully captured ${chartImagesArray.length} charts! These will be included in your PDF report.`);
        return chartImagesArray;
      } else {
        setStatusMessage('No charts were captured. Please check your feedback data.');
        return [];
      }
    } catch (error) {
      console.error('Error capturing charts:', error);
      setStatusMessage(`Error capturing charts: ${error.message}`);
      return [];
    }
  };

  // Upload images to Cloudinary
  const uploadToCloudinary = async (file, preset = 'report_expert') => {
    const formDataForUpload = new FormData();
    formDataForUpload.append('file', file);
    formDataForUpload.append('upload_preset', preset);
    
    try {
      const response = await axios.post(
        `https://api.cloudinary.com/v1_1/darnokazg/image/upload`,
        formDataForUpload
      );
      
      return response.data.secure_url;
    } catch (error) {
      console.error('Cloudinary upload error:', error);
      throw new Error(`Failed to upload image: ${error.message}`);
    }
  };

  // Handle event image uploads
  const handleEventImageUpload = async (e) => {
    const files = Array.from(e.target.files);
    if (files.length === 0) return;
    
    setIsUploadingImages(true);
    setStatusMessage(`Uploading ${files.length} event images...`);
    
    try {
      const uploadPromises = files.map(file => uploadToCloudinary(file));
      const uploadedUrls = await Promise.all(uploadPromises);
      
      handleCategorizedImageUpload(uploadedUrls.map(url => ({ original: url })), 'team');
    } catch (error) {
      console.error('Error uploading event images:', error);
      setStatusMessage(`Error uploading event images: ${error.message}`);
    } finally {
      setIsUploadingImages(false);
    }
  };

  // Handle question set image uploads
  const handleQuestionSetImageUpload = async (e) => {
    const files = Array.from(e.target.files);
    if (files.length === 0) return;
    
    setIsUploadingImages(true);
    setStatusMessage(`Uploading ${files.length} question set images...`);
    
    try {
      const uploadPromises = files.map(file => uploadToCloudinary(file));
      const uploadedUrls = await Promise.all(uploadPromises);
      
      handleCategorizedImageUpload(uploadedUrls.map(url => ({ original: url })), 'speakers');
    } catch (error) {
      console.error('Error uploading question set images:', error);
      setStatusMessage(`Error uploading question set images: ${error.message}`);
    } finally {
      setIsUploadingImages(false);
    }
  };

  // Handle approval letter image upload
  const handleApprovalLetterUpload = async (e) => {
    const file = e.target.files[0];
    if (!file) return;
    
    setIsUploadingImages(true);
    setStatusMessage('Uploading approval letter image...');
    
    try {
      const uploadedUrl = await uploadToCloudinary(file);
      
      handleCategorizedImageUpload([{ original: uploadedUrl }], 'certificates');
      
      setStatusMessage('Successfully uploaded approval letter image!');
    } catch (error) {
      console.error('Error uploading approval letter image:', error);
      setStatusMessage(`Error uploading approval letter image: ${error.message}`);
    } finally {
      setIsUploadingImages(false);
    }
  };

  // Handle removing an image
  const handleRemoveImage = (index, category = 'general') => {
    // Update the imageFiles state
    setImageFiles(prevFiles => {
      const updatedFiles = { ...prevFiles };
      
      // Remove the specific image from the category
      if (updatedFiles[category] && updatedFiles[category].length > index) {
        updatedFiles[category] = updatedFiles[category].filter((_, i) => i !== index);
      }
      
      return updatedFiles;
    });
    
    // Also update the formData
    setFormData(prevData => {
      if (!prevData.categorizedImages || !prevData.categorizedImages[category]) {
        return prevData;
      }
      
      const updatedCategorizedImages = { ...prevData.categorizedImages };
      updatedCategorizedImages[category] = updatedCategorizedImages[category].filter((_, i) => i !== index);
      
      return {
        ...prevData,
        categorizedImages: updatedCategorizedImages
      };
    });
  };

  // Generate PDF using ExpertReportPDFContainer
  const handleGeneratePDF = async () => {
    setIsGeneratingPDF(true);
    setPdfError(null);
    
    try {
      // If chart data exists but no chart images, capture charts first
      if (chartData.length > 0 && (!formData.chartImages || formData.chartImages.length === 0)) {
        setStatusMessage('Capturing charts before generating PDF...');
        await captureCharts();
      }
      
      // Create PDF document
      const pdfDoc = <ExpertReportPDFContainer data={formData} chartImages={formData.chartImages} />;
      const asPdf = pdf();
      asPdf.updateContainer(pdfDoc);
      const blob = await asPdf.toBlob();
      
      // Download PDF
      const fileName = `Expert_Session_${formData.title.replace(/\s+/g, "_")}.pdf`;
      saveAs(blob, fileName);
      
      setIsGeneratingPDF(false);
      setStatusMessage('PDF generated and downloaded successfully!');
    } catch (error) {
      console.error("Error generating PDF:", error);
      setPdfError(error.message || "Failed to generate PDF");
      setStatusMessage(`Error generating PDF: ${error.message}`);
      setIsGeneratingPDF(false);
    }
  };

  // Save report to database
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    try {
      const token = localStorage.getItem("token");
      
      // Check if charts need to be captured
      if (chartData.length > 0 && (!formData.chartImages || formData.chartImages.length === 0)) {
        console.log("Charts not captured yet, attempting to capture before saving");
        setStatusMessage("Capturing charts before saving report...");
        await captureCharts();
      }
      
      // Flatten all image URLs for backward compatibility
      const allImageUrls = [
        ...(formData.categorizedImages.team || []),
        ...(formData.categorizedImages.speakers || []),
        ...(formData.categorizedImages.certificates || []),
        ...(formData.categorizedImages.general || [])
      ];
      
      // Create report data to save
      const reportDataToSave = {
        ...formData,
        images: allImageUrls, // Use all Cloudinary URLs (flattened for backward compatibility)
        chartImages: formData.chartImages, // Use captured chart images
        reportType: 'expert',
      };
      
      console.log("Saving Expert Session report with chart images:", reportDataToSave.chartImages?.length);
      console.log("Saving Expert Session report with uploaded images:", reportDataToSave.images?.length);
      console.log("Saving Expert Session report with categorized images:", {
        team: formData.categorizedImages.team?.length || 0,
        speakers: formData.categorizedImages.speakers?.length || 0,
        certificates: formData.categorizedImages.certificates?.length || 0,
        general: formData.categorizedImages.general?.length || 0
      });
      
      const response = await axios.post("http://localhost:8000/api/reports", reportDataToSave, {
        headers: { Authorization: `Bearer ${token}` },
      });

      console.log("Expert Session Report Created:", response.data);

      // Show success message
      setSaveSuccess(true);
      setStatusMessage('Expert Session Report saved successfully!');
      
      // Hide success message after 3 seconds
      setTimeout(() => {
        setSaveSuccess(false);
      }, 3000);
      
    } catch (error) {
      console.error("Error creating Expert Session report:", error);
      let errorMessage = "Failed to save Expert Session report.";
      
      if (error.response) {
        errorMessage += ` Server responded with: ${error.response.status} - ${error.response.data.message || error.response.statusText}`;
      } else if (error.request) {
        errorMessage += " No response received from server. Please check your connection.";
      } else {
        errorMessage += ` Error: ${error.message}`;
      }
      
      setStatusMessage(errorMessage);
    }
  };

  // Reset form
  const handleReset = () => {
    if (window.confirm("Are you sure you want to reset the form? All entered data will be lost.")) {
      setImageFiles({
        team: [],
        speakers: [],
        certificates: [],
        general: []
      });
      setChartData([]);
      setChartImages([]);
      setFormData({
        title: "Quantum Computing",
        eventDate: "17/01/2025",
        eventTime: "03:00 pm to 05:00 pm",
        organizer: "Ms. Arti G Ghule",
        courseName: "Natural Language Processing",
        mode: "Online -Microsoft Teams",
        link: "https://teams.microsoft.com/l/meetupjoin/19%3ameeting_MDk5NTAzZWMtMzczNC00MWYwLTkwZmQtODhhNmZjZDA4ZTVk%40thread.v2/0?context=%7b%22Tid%22%3a%220a0aa63d-82d0-4ba1-b909d7986ece4c4c%22%2c%22Oid%22%3a%22acdcf479-e76c-436c-8eb73ff47fb72343%22%7d",
        participants: "235",
        objectives: [
          "Providing knowledge of Quantum Computing with real-life examples",
          "Introduction of Natural Quantum Computing",
          "Creating awareness of Internship, Placements, and Research Opportunities in Quantum Computing among students"
        ],
        outcomes: [
          "Understand role of quantum computing in different sectors like aerospace, healthcare, automobile, marketing etc.",
          "Understand Quantum Computing power in computations also boosted their confidence in applying Internship, Placements and Research Opportunities in Quantum Computing effectively"
        ],
        coPoMapping: [
          { code: "C19412C.6", description: "Students will be able to apply information retrieval techniques and learned how Quantum Computing helps in boosting speed of different IR algorithms" },
          { code: "PO11", description: "Project Management and Finance (To manage projects in multidisciplinary environment)" },
          { code: "PSO3", description: "Work in team to manage complex IT project using suitable project management techniques by utilizing high level interpersonal skills" }
        ],
        resourcePerson: "Mrs. Vaidehi Gawande/Dhande",
        impactAnalysis: [
          { title: "Knowledge Enhancement", content: "The session deepened the students' understanding of quantum computing fundamentals (e.g., qubits, superposition, entanglement). They gained insight into practical applications like cryptography, optimization, or quantum algorithms." },
          { title: "Awareness", content: "The session raised awareness about the current state of quantum computing research, challenges, and industry trends." },
          { title: "Skill Development", content: "Improved problem-solving or basic programming skills in quantum programming languages like Qiskit or Cirq." },
          { title: "Career Influence", content: "Students expressed an interest in pursuing careers or research in quantum computing as a result of the session." },
          { title: "Student Feedback", content: "Feedback form has been shared among students to understand their enthusiasm and satisfaction with the session." }
        ],
        excelData: [],
        feedbackData: [],
        chartImages: [],
        // Reset categorized images
        categorizedImages: {
          team: [],
          speakers: [],
          certificates: [],
          general: []
        }
      });
      setStatusMessage('');
    }
  };

  const renderDetailsTab = () => {
    return (
      <>
        <h2 className="text-xl font-semibold mb-4">Event Details</h2>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          {/* Title */}
          <div>
            <label className="block text-gray-700 mb-2">Title</label>
            <input
              type="text"
              value={formData.title}
              onChange={(e) => setFormData({ ...formData, title: e.target.value })}
              className="w-full p-2 border rounded"
              required
            />
          </div>
          
          {/* Event Date */}
          <div>
            <label className="block text-gray-700 mb-2">Event Date</label>
            <input
              type="text"
              value={formData.eventDate}
              onChange={(e) => setFormData({ ...formData, eventDate: e.target.value })}
              className="w-full p-2 border rounded"
              placeholder="DD/MM/YYYY"
              required
            />
          </div>
          
          {/* Event Time */}
          <div>
            <label className="block text-gray-700 mb-2">Event Time</label>
            <input
              type="text"
              value={formData.eventTime}
              onChange={(e) => setFormData({ ...formData, eventTime: e.target.value })}
              className="w-full p-2 border rounded"
              placeholder="HH:MM AM/PM to HH:MM AM/PM"
              required
            />
          </div>
          
          {/* Organized By */}
          <div>
            <label className="block text-gray-700 mb-2">Organized By</label>
            <input
              type="text"
              value={formData.organizer}
              onChange={(e) => setFormData({ ...formData, organizer: e.target.value })}
              className="w-full p-2 border rounded"
              required
            />
          </div>
          
          {/* Course Name */}
          <div>
            <label className="block text-gray-700 mb-2">Course Name</label>
            <input
              type="text"
              value={formData.courseName}
              onChange={(e) => setFormData({ ...formData, courseName: e.target.value })}
              className="w-full p-2 border rounded"
              required
            />
          </div>
          
          {/* Mode of Conduction */}
          <div>
            <label className="block text-gray-700 mb-2">Mode of Conduction</label>
            <input
              type="text"
              value={formData.mode}
              onChange={(e) => setFormData({ ...formData, mode: e.target.value })}
              className="w-full p-2 border rounded"
              placeholder="Online / Offline"
              required
            />
          </div>
          
          {/* Link (if Online) */}
          <div className="col-span-1 md:col-span-2">
            <label className="block text-gray-700 mb-2">Link (if Online)</label>
            <input
              type="text"
              value={formData.link}
              onChange={(e) => setFormData({ ...formData, link: e.target.value })}
              className="w-full p-2 border rounded"
              placeholder="Meeting link, if applicable"
            />
          </div>
          
          {/* Participants */}
          <div>
            <label className="block text-gray-700 mb-2">Number of Students Participated</label>
            <input
              type="text"
              value={formData.participants}
              onChange={(e) => setFormData({ ...formData, participants: e.target.value })}
              className="w-full p-2 border rounded"
              required
            />
          </div>
          
          {/* Resource Person */}
          <div>
            <label className="block text-gray-700 mb-2">Name of Resource Person</label>
            <input
              type="text"
              value={formData.resourcePerson}
              onChange={(e) => setFormData({ ...formData, resourcePerson: e.target.value })}
              className="w-full p-2 border rounded"
              required
            />
          </div>
        </div>
        
        {/* Objectives */}
        <div className="mb-4">
          <label className="block text-gray-700 mb-2">Objectives</label>
          {formData.objectives.map((objective, index) => (
            <div key={`objective-${index}`} className="flex mb-2">
              <input
                type="text"
                value={objective}
                onChange={(e) => handleArrayChange('objectives', index, e.target.value)}
                className="w-full p-2 border rounded"
              />
              <button
                type="button"
                onClick={() => handleRemoveArrayItem('objectives', index)}
                className="ml-2 text-red-500"
              >
                <FaTimes />
              </button>
            </div>
          ))}
          <button
            type="button"
            onClick={() => handleAddArrayItem('objectives')}
            className="mt-2 bg-gray-200 text-gray-700 py-1 px-3 rounded text-sm"
          >
            + Add Objective
          </button>
        </div>
        
        {/* Outcomes */}
        <div className="mb-4">
          <label className="block text-gray-700 mb-2">Outcomes</label>
          {formData.outcomes.map((outcome, index) => (
            <div key={`outcome-${index}`} className="flex mb-2">
              <input
                type="text"
                value={outcome}
                onChange={(e) => handleArrayChange('outcomes', index, e.target.value)}
                className="w-full p-2 border rounded"
              />
              <button
                type="button"
                onClick={() => handleRemoveArrayItem('outcomes', index)}
                className="ml-2 text-red-500"
              >
                <FaTimes />
              </button>
            </div>
          ))}
          <button
            type="button"
            onClick={() => handleAddArrayItem('outcomes')}
            className="mt-2 bg-gray-200 text-gray-700 py-1 px-3 rounded text-sm"
          >
            + Add Outcome
          </button>
        </div>
        
        {/* CO/PO/PSOs Addressed */}
        <div className="mb-4">
          <label className="block text-gray-700 mb-2">CO/PO/PSOs Addressed</label>
          {formData.coPoMapping.map((mapping, index) => (
            <div key={`mapping-${index}`} className="grid grid-cols-1 md:grid-cols-4 gap-2 mb-2">
              <div className="md:col-span-1">
                <input
                  type="text"
                  value={mapping.code}
                  onChange={(e) => handleNestedObjectChange('coPoMapping', index, 'code', e.target.value)}
                  className="w-full p-2 border rounded"
                  placeholder="CO/PO/PSO Code"
                />
              </div>
              <div className="md:col-span-3 flex">
                <input
                  type="text"
                  value={mapping.description}
                  onChange={(e) => handleNestedObjectChange('coPoMapping', index, 'description', e.target.value)}
                  className="w-full p-2 border rounded"
                  placeholder="Description"
                />
                <button
                  type="button"
                  onClick={() => handleRemoveArrayItem('coPoMapping', index)}
                  className="ml-2 text-red-500"
                >
                  <FaTimes />
                </button>
              </div>
            </div>
          ))}
          <button
            type="button"
            onClick={() => handleAddArrayItem('coPoMapping')}
            className="mt-2 bg-gray-200 text-gray-700 py-1 px-3 rounded text-sm"
          >
            + Add CO/PO/PSO Mapping
          </button>
        </div>
        
        {/* Impact Analysis */}
        <div className="mb-4">
          <label className="block text-gray-700 mb-2">Impact Analysis</label>
          {formData.impactAnalysis.map((impact, index) => (
            <div key={`impact-${index}`} className="grid grid-cols-1 md:grid-cols-4 gap-2 mb-2">
              <div className="md:col-span-1">
                <input
                  type="text"
                  value={impact.title}
                  onChange={(e) => handleNestedObjectChange('impactAnalysis', index, 'title', e.target.value)}
                  className="w-full p-2 border rounded"
                  placeholder="Title"
                />
              </div>
              <div className="md:col-span-3 flex">
                <input
                  type="text"
                  value={impact.content}
                  onChange={(e) => handleNestedObjectChange('impactAnalysis', index, 'content', e.target.value)}
                  className="w-full p-2 border rounded"
                  placeholder="Content"
                />
                <button
                  type="button"
                  onClick={() => handleRemoveArrayItem('impactAnalysis', index)}
                  className="ml-2 text-red-500"
                >
                  <FaTimes />
                </button>
              </div>
            </div>
          ))}
          <button
            type="button"
            onClick={() => handleAddArrayItem('impactAnalysis')}
            className="mt-2 bg-gray-200 text-gray-700 py-1 px-3 rounded text-sm"
          >
            + Add Impact Analysis Item
          </button>
        </div>
      </>
    );
  };

  const renderMediaTab = () => {
    return (
      <>
        <h2 className="text-xl font-semibold mb-4">Media & Images</h2>

        {/* Event Images Section */}
        <div className="border p-4 rounded-lg mb-4 bg-white shadow-sm">
          <h3 className="text-xl font-semibold mb-6">Photographs of Expert Session</h3>
          
          <div className="mb-6">
            <p className="text-sm text-gray-600 mb-4">
              Upload images for your expert session. These will be incorporated into your PDF report.
            </p>
            
            {/* Unified Image Upload */}
            <div className="bg-blue-50 p-4 rounded-lg mb-4">
              <h5 className="text-md font-medium mb-2 text-blue-800">Photographs of Event</h5>
              <p className="text-sm text-gray-600 mb-3">Upload images of the expert session including team members, audience, and activities.</p>
              <CloudinaryUploader 
                onUploadSuccess={(images) => handleCategorizedImageUpload(images, 'team')}
                onUploadError={(error) => {
                  console.error("Cloudinary upload failed:", error);
                  setStatusMessage(`Event image upload failed: ${error.message}`);
                }}
                buttonText="Upload Event Photos"
                folder="report_expert"
                maxFiles={5}
                category="team"
                className="mb-2"
              />
              
              {/* Event Images Preview */}
              {imageFiles.team && imageFiles.team.length > 0 && (
                <div className="mt-3">
                  <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3">
                    {imageFiles.team.map((file, index) => (
                      <div key={index} className="relative group">
                        <img 
                          src={file.thumbnail || file.preview || file.original} 
                          alt={`Event ${index + 1}`}
                          className="w-full h-24 object-cover rounded border border-gray-200"
                        />
                        <button
                          type="button"
                          onClick={() => handleRemoveImage(index, 'team')}
                          className="absolute top-1 right-1 bg-red-500 text-white p-1 rounded-full opacity-0 group-hover:opacity-100 transition-opacity"
                          title="Remove image"
                        >
                          <FaTrash size={12} />
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
            
            {/* Speaker/Resource Person Images */}
            <div className="bg-green-50 p-4 rounded-lg mb-4">
              <h5 className="text-md font-medium mb-2 text-green-800">Speaker & Resource Person Photos</h5>
              <p className="text-sm text-gray-600 mb-3">Upload images of speakers, resource persons, and expert presenters.</p>
              <CloudinaryUploader 
                onUploadSuccess={(images) => handleCategorizedImageUpload(images, 'speakers')}
                onUploadError={(error) => {
                  console.error("Cloudinary upload failed:", error);
                  setStatusMessage(`Speaker image upload failed: ${error.message}`);
                }}
                buttonText="Upload Speaker Photos"
                folder="report_expert"
                maxFiles={5}
                category="speakers"
                className="mb-2"
              />
              
              {/* Speakers Images Preview */}
              {imageFiles.speakers && imageFiles.speakers.length > 0 && (
                <div className="mt-3">
                  <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3">
                    {imageFiles.speakers.map((file, index) => (
                      <div key={index} className="relative group">
                        <img 
                          src={file.thumbnail || file.preview || file.original} 
                          alt={`Speaker ${index + 1}`}
                          className="w-full h-24 object-cover rounded border border-gray-200"
                        />
                        <button
                          type="button"
                          onClick={() => handleRemoveImage(index, 'speakers')}
                          className="absolute top-1 right-1 bg-red-500 text-white p-1 rounded-full opacity-0 group-hover:opacity-100 transition-opacity"
                          title="Remove image"
                        >
                          <FaTrash size={12} />
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
            
            {/* Question Set For Feedback / Approval Letter Images */}
            <div className="bg-purple-50 p-4 rounded-lg mb-4">
              <h5 className="text-md font-medium mb-2 text-purple-800">Approval Letters & Documents</h5>
              <p className="text-sm text-gray-600 mb-3">Upload approval letters, feedback forms, and other official documents.</p>
              <CloudinaryUploader 
                onUploadSuccess={(images) => handleCategorizedImageUpload(images, 'certificates')}
                onUploadError={(error) => {
                  console.error("Cloudinary upload failed:", error);
                  setStatusMessage(`Document upload failed: ${error.message}`);
                }}
                buttonText="Upload Documents"
                folder="report_expert"
                maxFiles={5}
                category="certificates"
                className="mb-2"
              />
              
              {/* Document Images Preview */}
              {imageFiles.certificates && imageFiles.certificates.length > 0 && (
                <div className="mt-3">
                  <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3">
                    {imageFiles.certificates.map((file, index) => (
                      <div key={index} className="relative group">
                        <img 
                          src={file.thumbnail || file.preview || file.original} 
                          alt={`Document ${index + 1}`}
                          className="w-full h-24 object-cover rounded border border-gray-200"
                        />
                        <button
                          type="button"
                          onClick={() => handleRemoveImage(index, 'certificates')}
                          className="absolute top-1 right-1 bg-red-500 text-white p-1 rounded-full opacity-0 group-hover:opacity-100 transition-opacity"
                          title="Remove image"
                        >
                          <FaTrash size={12} />
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
            
            {/* Other Session Images */}
            <div className="bg-gray-50 p-4 rounded-lg">
              <h5 className="text-md font-medium mb-2 text-gray-800">Other Session Images</h5>
              <p className="text-sm text-gray-600 mb-3">Upload any additional images related to the expert session.</p>
              <CloudinaryUploader 
                onUploadSuccess={(images) => handleCategorizedImageUpload(images, 'general')}
                onUploadError={(error) => {
                  console.error("Cloudinary upload failed:", error);
                  setStatusMessage(`Image upload failed: ${error.message}`);
                }}
                buttonText="Upload Other Images"
                folder="report_expert"
                maxFiles={5}
                category="general"
                className="mb-2"
              />
              
              {/* General Images Preview */}
              {imageFiles.general && imageFiles.general.length > 0 && (
                <div className="mt-3">
                  <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3">
                    {imageFiles.general.map((file, index) => (
                      <div key={index} className="relative group">
                        <img 
                          src={file.thumbnail || file.preview || file.original} 
                          alt={`Image ${index + 1}`}
                          className="w-full h-24 object-cover rounded border border-gray-200"
                        />
                        <button
                          type="button"
                          onClick={() => handleRemoveImage(index, 'general')}
                          className="absolute top-1 right-1 bg-red-500 text-white p-1 rounded-full opacity-0 group-hover:opacity-100 transition-opacity"
                          title="Remove image"
                        >
                          <FaTrash size={12} />
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </>
    );
  };

  const renderDataTab = () => {
    return (
      <>
        <h2 className="text-xl font-semibold mb-4">Feedback & Student Data</h2>

        {/* Feedback Excel Upload Section */}
        <div className="mb-6">
          <h3 className="text-xl font-semibold mb-3 text-gray-700 border-b pb-2">Feedback Data Analysis</h3>
          <p className="text-gray-600 mb-3">
            Upload an Excel file containing feedback data. The file should have column headers with questions containing "?" character. Each row should represent one student's responses.
          </p>
          
          {/* Hidden file input */}
          <input 
            type="file" 
            ref={feedbackExcelInputRef}
            onChange={handleFeedbackUpload}
            className="hidden"
            accept=".xlsx,.xls"
          />
          
          {/* Custom upload button */}
          <button
            type="button"
            onClick={() => feedbackExcelInputRef.current.click()}
            className="mb-4 flex items-center p-3 border-2 border-dashed border-green-300 rounded-md text-green-500 hover:text-green-700 hover:border-green-500"
            disabled={isProcessingFeedback}
          >
            {isProcessingFeedback ? (
              <>
                <svg className="animate-spin -ml-1 mr-2 h-5 w-5 text-green-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Processing Feedback Data...
              </>
            ) : (
              <>
                <FaFileExcel className="mr-2" /> Upload Feedback Excel
              </>
            )}
          </button>
          
          {/* Feedback Data Preview */}
          {formData.feedbackData.length > 0 && (
            <div className="mt-4">
              <h3 className="text-lg font-medium mb-2">Feedback Data Preview</h3>
              <div className="overflow-x-auto">
                <table className="min-w-full bg-white border">
                  <thead className="bg-gray-100">
                    <tr>
                      {Object.keys(formData.feedbackData[0]).slice(0, 5).map((header, index) => (
                        <th key={`header-${index}`} className="py-2 px-4 border text-left">
                          {header}
                        </th>
                      ))}
                      {Object.keys(formData.feedbackData[0]).length > 5 && (
                        <th className="py-2 px-4 border text-left">...</th>
                      )}
                    </tr>
                  </thead>
                  <tbody>
                    {formData.feedbackData.slice(0, 5).map((row, rowIndex) => (
                      <tr key={`row-${rowIndex}`}>
                        {Object.values(row).slice(0, 5).map((cell, cellIndex) => (
                          <td key={`cell-${rowIndex}-${cellIndex}`} className="py-2 px-4 border">
                            {String(cell)}
                          </td>
                        ))}
                        {Object.values(row).length > 5 && (
                          <td className="py-2 px-4 border">...</td>
                        )}
                      </tr>
                    ))}
                    {formData.feedbackData.length > 5 && (
                      <tr>
                        <td colSpan={Math.min(6, Object.keys(formData.feedbackData[0]).length)} className="py-2 px-4 border text-center text-gray-500">
                          {formData.feedbackData.length - 5} more entries...
                        </td>
                      </tr>
                    )}
                  </tbody>
                </table>
              </div>
            </div>
          )}
        </div>

        {/* Student Data Excel Upload Section */}
        <div className="mb-6">
          <h3 className="text-xl font-semibold mb-3 text-gray-700 border-b pb-2">Student Participation Data</h3>
          <p className="text-gray-600 mb-3">
            Upload an Excel file containing student participation data. The file should have columns for Roll Number, Name, etc.
          </p>
          
          {/* Hidden file input */}
          <input 
            type="file" 
            ref={excelFileInputRef}
            onChange={handleExcelUpload}
            className="hidden"
            accept=".xlsx,.xls"
          />
          
          {/* Custom upload button */}
          <button
            type="button"
            onClick={() => excelFileInputRef.current.click()}
            className="mb-4 flex items-center p-3 border-2 border-dashed border-blue-300 rounded-md text-blue-500 hover:text-blue-700 hover:border-blue-500"
          >
            <FaFileExcel className="mr-2" /> Upload Student Data Excel
          </button>
          
          {/* Excel Data Preview */}
          {formData.excelData.length > 0 && (
            <div className="mt-4">
              <h3 className="text-lg font-medium mb-2">Student Data Preview</h3>
              <div className="overflow-x-auto">
                <table className="min-w-full bg-white border">
                  <thead className="bg-gray-100">
                    <tr>
                      {Object.keys(formData.excelData[0]).slice(0, 5).map((header, index) => (
                        <th key={`excel-header-${index}`} className="py-2 px-4 border text-left">
                          {header}
                        </th>
                      ))}
                      {Object.keys(formData.excelData[0]).length > 5 && (
                        <th className="py-2 px-4 border text-left">...</th>
                      )}
                    </tr>
                  </thead>
                  <tbody>
                    {formData.excelData.slice(0, 5).map((row, rowIndex) => (
                      <tr key={`excel-row-${rowIndex}`}>
                        {Object.values(row).slice(0, 5).map((cell, cellIndex) => (
                          <td key={`excel-cell-${rowIndex}-${cellIndex}`} className="py-2 px-4 border">
                            {String(cell)}
                          </td>
                        ))}
                        {Object.values(row).length > 5 && (
                          <td className="py-2 px-4 border">...</td>
                        )}
                      </tr>
                    ))}
                    {formData.excelData.length > 5 && (
                      <tr>
                        <td colSpan={Math.min(6, Object.keys(formData.excelData[0]).length)} className="py-2 px-4 border text-center text-gray-500">
                          {formData.excelData.length - 5} more entries...
                        </td>
                      </tr>
                    )}
                  </tbody>
                </table>
              </div>
            </div>
          )}
        </div>

        {/* Feedback Charts */}
        {chartData.length > 0 && (
          <div className="mb-6">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-medium">Feedback Charts</h3>
              <button
                type="button"
                onClick={captureCharts}
                className={`px-3 py-1 ${
                  chartData.length > 0 && (!chartImages || chartImages.length === 0)
                    ? "bg-green-500 text-white font-medium text-sm rounded hover:bg-green-600 animate-pulse transition-all duration-300 transform hover:scale-105 shadow-md"
                    : "bg-blue-500 text-white text-sm rounded hover:bg-blue-600"
                } flex items-center`}
              >
                {chartData.length > 0 && (!chartImages || chartImages.length === 0) ? (
                  <>
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                    </svg>
                    Capture Charts (Required)
                  </>
                ) : (
                  <>Capture Charts</>
                )}
              </button>
            </div>
            <div ref={chartsContainerRef} className="space-y-8">
              {chartData.map((item, index) => (
                <div 
                  key={`chart-item-${index}`} 
                  id={`chart-item-${index}`} 
                  className="bg-white rounded-lg shadow-md p-4"
                >
                  <h4 className="text-md font-semibold mb-3">{item.question}</h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="h-64">
                      <canvas id={`chart-${index}`}></canvas>
                    </div>
                    <div className="h-64">
                      <canvas id={`pie-chart-${index}`}></canvas>
                    </div>
                  </div>
                </div>
              ))}
            </div>
            
            {/* Success message for captured charts */}
            {chartImages && chartImages.length > 0 && (
              <div className="mt-4 p-3 bg-green-100 text-green-700 border border-green-300 rounded-md shadow-sm">
                <div className="flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                  </svg>
                  <span className="font-medium">Successfully captured {chartImages.length} feedback charts!</span>
                </div>
                <p className="text-sm mt-1 ml-7">Charts will be included in the PDF report. You can now download the PDF or save the report.</p>
              </div>
            )}
          </div>
        )}
      </>
    );
  };

  const renderGenerateTab = () => {
    return (
      <>
        <h2 className="text-xl font-semibold mb-4">Generate PDF Report</h2>
        
        <div className="bg-gray-50 p-4 rounded-lg mb-6">
          <h3 className="text-lg font-medium mb-3">Report Summary</h3>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <p className="text-gray-700 font-medium">Title:</p>
              <p>{formData.title || 'Not specified'}</p>
            </div>
            <div>
              <p className="text-gray-700 font-medium">Date & Time:</p>
              <p>{formData.eventDate || 'Not specified'} | {formData.eventTime || 'Not specified'}</p>
            </div>
            <div>
              <p className="text-gray-700 font-medium">Organized By:</p>
              <p>{formData.organizer || 'Not specified'}</p>
            </div>
            <div>
              <p className="text-gray-700 font-medium">Course Name:</p>
              <p>{formData.courseName || 'Not specified'}</p>
            </div>
            <div>
              <p className="text-gray-700 font-medium">Mode of Conduction:</p>
              <p>{formData.mode || 'Not specified'}</p>
            </div>
            <div>
              <p className="text-gray-700 font-medium">Resource Person:</p>
              <p>{formData.resourcePerson || 'Not specified'}</p>
            </div>
            <div>
              <p className="text-gray-700 font-medium">Students Participated:</p>
              <p>{formData.participants || 'Not specified'}</p>
            </div>
          </div>
          
          <div className="mb-4">
            <p className="text-gray-700 font-medium">Objectives:</p>
            {formData.objectives.length > 0 ? (
              <ul className="list-disc pl-5">
                {formData.objectives.map((obj, index) => (
                  <li key={`obj-preview-${index}`}>{obj}</li>
                ))}
              </ul>
            ) : (
              <p className="text-gray-500 italic">No objectives specified</p>
            )}
          </div>
          
          <div className="mb-4">
            <p className="text-gray-700 font-medium">Outcomes:</p>
            {formData.outcomes.length > 0 ? (
              <ul className="list-disc pl-5">
                {formData.outcomes.map((outcome, index) => (
                  <li key={`outcome-preview-${index}`}>{outcome}</li>
                ))}
              </ul>
            ) : (
              <p className="text-gray-500 italic">No outcomes specified</p>
            )}
          </div>
          
          <div className="mb-4">
            <p className="text-gray-700 font-medium">CO/PO/PSO Mapping:</p>
            {formData.coPoMapping.length > 0 ? (
              <ul className="list-disc pl-5">
                {formData.coPoMapping.map((mapping, index) => (
                  <li key={`mapping-preview-${index}`}>{mapping.code}: {mapping.description}</li>
                ))}
              </ul>
            ) : (
              <p className="text-gray-500 italic">No CO/PO/PSO mapping specified</p>
            )}
          </div>
          
          <div className="mb-4">
            <p className="text-gray-700 font-medium">Impact Analysis:</p>
            {formData.impactAnalysis.length > 0 ? (
              <ul className="list-disc pl-5">
                {formData.impactAnalysis.map((impact, index) => (
                  <li key={`impact-preview-${index}`}>{impact.title}: {impact.content}</li>
                ))}
              </ul>
            ) : (
              <p className="text-gray-500 italic">No impact analysis specified</p>
            )}
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <p className="text-gray-700 font-medium">Team Images:</p>
              <p className="text-gray-600">{formData.categorizedImages.team?.length || 0} images</p>
            </div>
            <div>
              <p className="text-gray-700 font-medium">Speaker Images:</p>
              <p className="text-gray-600">{formData.categorizedImages.speakers?.length || 0} images</p>
            </div>
            <div>
              <p className="text-gray-700 font-medium">Certificate & Approval Images:</p>
              <p className="text-gray-600">{formData.categorizedImages.certificates?.length || 0} images</p>
            </div>
            <div>
              <p className="text-gray-700 font-medium">Other Images:</p>
              <p className="text-gray-600">{formData.categorizedImages.general?.length || 0} images</p>
            </div>
            <div>
              <p className="text-gray-700 font-medium">Student Data:</p>
              <p className="text-gray-600">{formData.excelData.length} rows</p>
            </div>
            <div>
              <p className="text-gray-700 font-medium">Feedback Charts:</p>
              <p className="text-gray-600">{chartImages.length} charts</p>
            </div>
          </div>
          
          {pdfError && (
            <div className="bg-red-100 text-red-700 p-3 rounded mb-4">
              <p className="font-medium">Error generating PDF:</p>
              <p>{pdfError}</p>
            </div>
          )}
          
          <div className="flex justify-center">
            <ErrorBoundary
              fallback={
                <button
                  type="button"
                  className="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition duration-300 flex items-center"
                  onClick={() => {
                    setPdfError(null);
                    handleGeneratePDF();
                  }}
                >
                  Try PDF generation again
                </button>
              }
            >
              <button
                type="button"
                disabled={isGeneratingPDF || (chartData.length > 0 && (!chartImages || chartImages.length === 0))}
                onClick={handleGeneratePDF}
                className={`${
                  chartData.length > 0 && (!chartImages || chartImages.length === 0)
                    ? "bg-gray-400 cursor-not-allowed"
                    : "bg-red-600 hover:bg-red-700"
                } text-white px-4 py-2 rounded-lg transition duration-300 flex items-center relative group`}
              >
                {isGeneratingPDF ? (
                  <span className="flex items-center">
                    <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Preparing PDF...
                  </span>
                ) : (
                  <><FaFilePdf className="mr-2" /> Download PDF</>
                )}
                {chartData.length > 0 && (!chartImages || chartImages.length === 0) && (
                  <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 w-48 p-2 bg-gray-800 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 text-center pointer-events-none">
                    Please capture charts first by clicking the "Capture Charts" button
                  </div>
                )}
              </button>
            </ErrorBoundary>
          </div>
        </div>
        
        <div className="bg-blue-50 p-4 rounded-lg">
          <h3 className="text-lg font-medium mb-3">Save Report</h3>
          <p className="mb-4 text-gray-700">
            Save this report to access it later from the Previous Reports page. 
            You'll be able to download it again or make changes.
          </p>
          
          <div className="flex justify-center">
            <button
              type="submit"
              className="bg-blue-500 text-white py-2 px-6 rounded flex items-center hover:bg-blue-600 transition duration-300"
            >
              <FaSave className="mr-2" /> Save Report
            </button>
          </div>
        </div>
      </>
    );
  };

  return (
    <div className="max-w-6xl mx-auto p-8">
      <form onSubmit={handleSubmit} className="bg-white p-8 rounded-lg shadow-lg transform transition duration-500 hover:scale-102">
        <h2 className="text-2xl font-bold mb-6 text-gray-800">Expert Session Report</h2>
        
        {saveSuccess && (
          <div className="mb-4 p-3 bg-green-100 text-green-700 border border-green-200 rounded flex items-center">
            <FaCheckCircle className="mr-2" /> Expert Session Report saved successfully!
          </div>
        )}

        {/* Status Messages with improved styling based on message content */}
        {statusMessage && (
          <div className={`mb-4 p-3 rounded-md shadow-sm flex items-center ${
            statusMessage.includes('Successfully') || statusMessage.includes('✅') 
              ? 'bg-green-100 text-green-700 border border-green-300'
              : statusMessage.includes('Error') || statusMessage.includes('No charts')
                ? 'bg-red-100 text-red-700 border border-red-300'
                : statusMessage.includes('Starting') || statusMessage.includes('Capturing') || statusMessage.includes('Found')
                  ? 'bg-blue-100 text-blue-700 border border-blue-300'
                  : 'bg-gray-100 text-gray-700 border border-gray-300'
          }`}>
            {statusMessage.includes('Error') ? (
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
              </svg>
            ) : statusMessage.includes('Successfully') || statusMessage.includes('✅') ? (
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
              </svg>
            ) : (
              <svg xmlns="http://www.w3.org/2000/svg" className="animate-spin h-5 w-5 mr-2 flex-shrink-0" fill="none" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
            )}
            <span>{statusMessage}</span>
          </div>
        )}

        {/* Tabs navigation */}
        <div className="flex border-b border-gray-200 mb-6 overflow-x-auto">
          <button
            type="button"
            className={`py-2 px-4 border-b-2 font-medium text-sm ${
              selectedTab === 'details'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
            onClick={() => setSelectedTab('details')}
          >
            Event Details
          </button>
          <button
            type="button"
            className={`py-2 px-4 border-b-2 font-medium text-sm ${
              selectedTab === 'media'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
            onClick={() => setSelectedTab('media')}
          >
            Media & Images
          </button>
          <button
            type="button"
            className={`py-2 px-4 border-b-2 font-medium text-sm ${
              selectedTab === 'data'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
            onClick={() => setSelectedTab('data')}
          >
            Feedback & Data
          </button>
          <button
            type="button"
            className={`py-2 px-4 border-b-2 font-medium text-sm ${
              selectedTab === 'generate'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
            onClick={() => setSelectedTab('generate')}
          >
            Generate PDF
          </button>
        </div>

        {/* Tab content will be rendered here based on selectedTab */}
        {selectedTab === 'details' && renderDetailsTab()}
        {selectedTab === 'media' && renderMediaTab()}
        {selectedTab === 'data' && renderDataTab()}
        {selectedTab === 'generate' && renderGenerateTab()}

        {/* Submit Button */}
        <div className="flex justify-between mt-6">
          <div className="flex space-x-3">
            <Link 
              to="/dashboard" 
              className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition duration-300"
            >
              Cancel
            </Link>
            <button 
              type="button" 
              onClick={handleReset}
              className="bg-yellow-500 text-white px-4 py-2 rounded-lg hover:bg-yellow-600 transition duration-300"
            >
              Reset Form
            </button>
          </div>
          <div className="flex space-x-3">
            <button
              type="button"
              disabled={isGeneratingPDF || (chartData.length > 0 && (!chartImages || chartImages.length === 0))}
              onClick={handleGeneratePDF}
              className={`${
                chartData.length > 0 && (!chartImages || chartImages.length === 0)
                  ? "bg-gray-400 cursor-not-allowed"
                  : "bg-green-600 hover:bg-green-700"
              } text-white px-4 py-2 rounded-lg transition duration-300 flex items-center`}
            >
              {isGeneratingPDF ? (
                <span className="flex items-center">
                  <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Generating...
                </span>
              ) : (
                <><FaFileDownload className="mr-2" /> Generate PDF</>
              )}
            </button>
            <button
              type="submit"
              className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition duration-300 flex items-center"
            >
              <FaSave className="mr-2" /> Save Report
            </button>
          </div>
        </div>
      </form>
    </div>
  );
};

export default ExpertReport;
